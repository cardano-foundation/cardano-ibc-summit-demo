// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vesseloracle/vesseloracle/vessel_index_imo.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VesselIndexImo struct {
	Keys []*VesselIndexImo_Key `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *VesselIndexImo) Reset()         { *m = VesselIndexImo{} }
func (m *VesselIndexImo) String() string { return proto.CompactTextString(m) }
func (*VesselIndexImo) ProtoMessage()    {}
func (*VesselIndexImo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e25b61bdd4eba5a, []int{0}
}
func (m *VesselIndexImo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VesselIndexImo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VesselIndexImo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VesselIndexImo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VesselIndexImo.Merge(m, src)
}
func (m *VesselIndexImo) XXX_Size() int {
	return m.Size()
}
func (m *VesselIndexImo) XXX_DiscardUnknown() {
	xxx_messageInfo_VesselIndexImo.DiscardUnknown(m)
}

var xxx_messageInfo_VesselIndexImo proto.InternalMessageInfo

func (m *VesselIndexImo) GetKeys() []*VesselIndexImo_Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type VesselIndexImo_Key struct {
	Imo    string `protobuf:"bytes,1,opt,name=imo,proto3" json:"imo,omitempty"`
	Ts     uint64 `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *VesselIndexImo_Key) Reset()         { *m = VesselIndexImo_Key{} }
func (m *VesselIndexImo_Key) String() string { return proto.CompactTextString(m) }
func (*VesselIndexImo_Key) ProtoMessage()    {}
func (*VesselIndexImo_Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e25b61bdd4eba5a, []int{0, 0}
}
func (m *VesselIndexImo_Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VesselIndexImo_Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VesselIndexImo_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VesselIndexImo_Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VesselIndexImo_Key.Merge(m, src)
}
func (m *VesselIndexImo_Key) XXX_Size() int {
	return m.Size()
}
func (m *VesselIndexImo_Key) XXX_DiscardUnknown() {
	xxx_messageInfo_VesselIndexImo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_VesselIndexImo_Key proto.InternalMessageInfo

func (m *VesselIndexImo_Key) GetImo() string {
	if m != nil {
		return m.Imo
	}
	return ""
}

func (m *VesselIndexImo_Key) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *VesselIndexImo_Key) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func init() {
	proto.RegisterType((*VesselIndexImo)(nil), "vesseloracle.vesseloracle.VesselIndexImo")
	proto.RegisterType((*VesselIndexImo_Key)(nil), "vesseloracle.vesseloracle.VesselIndexImo.Key")
}

func init() {
	proto.RegisterFile("vesseloracle/vesseloracle/vessel_index_imo.proto", fileDescriptor_1e25b61bdd4eba5a)
}

var fileDescriptor_1e25b61bdd4eba5a = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x28, 0x4b, 0x2d, 0x2e,
	0x4e, 0xcd, 0xc9, 0x2f, 0x4a, 0x4c, 0xce, 0x49, 0xd5, 0xc7, 0xc2, 0x89, 0xcf, 0xcc, 0x4b, 0x49,
	0xad, 0x88, 0xcf, 0xcc, 0xcd, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x44, 0x56, 0xa4,
	0x87, 0xcc, 0x51, 0x9a, 0xc2, 0xc8, 0xc5, 0x17, 0x06, 0x16, 0xf0, 0x04, 0x69, 0xf2, 0xcc, 0xcd,
	0x17, 0x72, 0xe4, 0x62, 0xc9, 0x4e, 0xad, 0x2c, 0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0xd2,
	0xd5, 0xc3, 0xa9, 0x59, 0x0f, 0x55, 0xa3, 0x9e, 0x77, 0x6a, 0x65, 0x10, 0x58, 0xab, 0x94, 0x3d,
	0x17, 0xb3, 0x77, 0x6a, 0xa5, 0x90, 0x00, 0x17, 0x73, 0x66, 0x6e, 0xbe, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x88, 0x29, 0xc4, 0xc7, 0xc5, 0x54, 0x52, 0x2c, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1,
	0x12, 0xc4, 0x54, 0x52, 0x2c, 0x24, 0xc6, 0xc5, 0x56, 0x9c, 0x5f, 0x5a, 0x94, 0x9c, 0x2a, 0xc1,
	0x0c, 0x56, 0x04, 0xe5, 0x39, 0x59, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43,
	0x94, 0x22, 0x8a, 0x87, 0x2b, 0x50, 0xfd, 0x5f, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xf6,
	0xb5, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xf6, 0xb9, 0xda, 0x29, 0x01, 0x00, 0x00,
}

func (m *VesselIndexImo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VesselIndexImo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VesselIndexImo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVesselIndexImo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VesselIndexImo_Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VesselIndexImo_Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VesselIndexImo_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintVesselIndexImo(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ts != 0 {
		i = encodeVarintVesselIndexImo(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Imo) > 0 {
		i -= len(m.Imo)
		copy(dAtA[i:], m.Imo)
		i = encodeVarintVesselIndexImo(dAtA, i, uint64(len(m.Imo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVesselIndexImo(dAtA []byte, offset int, v uint64) int {
	offset -= sovVesselIndexImo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VesselIndexImo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovVesselIndexImo(uint64(l))
		}
	}
	return n
}

func (m *VesselIndexImo_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imo)
	if l > 0 {
		n += 1 + l + sovVesselIndexImo(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovVesselIndexImo(uint64(m.Ts))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovVesselIndexImo(uint64(l))
	}
	return n
}

func sovVesselIndexImo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVesselIndexImo(x uint64) (n int) {
	return sovVesselIndexImo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VesselIndexImo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVesselIndexImo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VesselIndexImo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VesselIndexImo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesselIndexImo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVesselIndexImo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVesselIndexImo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &VesselIndexImo_Key{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVesselIndexImo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVesselIndexImo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VesselIndexImo_Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVesselIndexImo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesselIndexImo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesselIndexImo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesselIndexImo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesselIndexImo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVesselIndexImo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVesselIndexImo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVesselIndexImo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVesselIndexImo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVesselIndexImo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVesselIndexImo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVesselIndexImo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVesselIndexImo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVesselIndexImo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVesselIndexImo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVesselIndexImo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVesselIndexImo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVesselIndexImo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVesselIndexImo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVesselIndexImo = fmt.Errorf("proto: unexpected end of group")
)
