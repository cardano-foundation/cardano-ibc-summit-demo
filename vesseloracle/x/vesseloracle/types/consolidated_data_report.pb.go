// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vesseloracle/vesseloracle/consolidated_data_report.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConsolidatedDataReport struct {
	Imo            string `protobuf:"bytes,1,opt,name=imo,proto3" json:"imo,omitempty"`
	Ts             uint64 `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	TotalSamples   int32  `protobuf:"varint,3,opt,name=total_samples,json=totalSamples,proto3" json:"total_samples,omitempty"`
	EtaOutliers    int32  `protobuf:"varint,4,opt,name=eta_outliers,json=etaOutliers,proto3" json:"eta_outliers,omitempty"`
	EtaMeanCleaned uint64 `protobuf:"varint,5,opt,name=eta_mean_cleaned,json=etaMeanCleaned,proto3" json:"eta_mean_cleaned,omitempty"`
	EtaMeanAll     uint64 `protobuf:"varint,6,opt,name=eta_mean_all,json=etaMeanAll,proto3" json:"eta_mean_all,omitempty"`
	EtaStdCleaned  uint64 `protobuf:"varint,7,opt,name=eta_std_cleaned,json=etaStdCleaned,proto3" json:"eta_std_cleaned,omitempty"`
	EtaStdAll      uint64 `protobuf:"varint,8,opt,name=eta_std_all,json=etaStdAll,proto3" json:"eta_std_all,omitempty"`
	DepportScore   int32  `protobuf:"varint,9,opt,name=depport_score,json=depportScore,proto3" json:"depport_score,omitempty"`
	Depport        string `protobuf:"bytes,10,opt,name=depport,proto3" json:"depport,omitempty"`
	Creator        string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *ConsolidatedDataReport) Reset()         { *m = ConsolidatedDataReport{} }
func (m *ConsolidatedDataReport) String() string { return proto.CompactTextString(m) }
func (*ConsolidatedDataReport) ProtoMessage()    {}
func (*ConsolidatedDataReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_152666c309c33442, []int{0}
}
func (m *ConsolidatedDataReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsolidatedDataReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsolidatedDataReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsolidatedDataReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsolidatedDataReport.Merge(m, src)
}
func (m *ConsolidatedDataReport) XXX_Size() int {
	return m.Size()
}
func (m *ConsolidatedDataReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsolidatedDataReport.DiscardUnknown(m)
}

var xxx_messageInfo_ConsolidatedDataReport proto.InternalMessageInfo

func (m *ConsolidatedDataReport) GetImo() string {
	if m != nil {
		return m.Imo
	}
	return ""
}

func (m *ConsolidatedDataReport) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *ConsolidatedDataReport) GetTotalSamples() int32 {
	if m != nil {
		return m.TotalSamples
	}
	return 0
}

func (m *ConsolidatedDataReport) GetEtaOutliers() int32 {
	if m != nil {
		return m.EtaOutliers
	}
	return 0
}

func (m *ConsolidatedDataReport) GetEtaMeanCleaned() uint64 {
	if m != nil {
		return m.EtaMeanCleaned
	}
	return 0
}

func (m *ConsolidatedDataReport) GetEtaMeanAll() uint64 {
	if m != nil {
		return m.EtaMeanAll
	}
	return 0
}

func (m *ConsolidatedDataReport) GetEtaStdCleaned() uint64 {
	if m != nil {
		return m.EtaStdCleaned
	}
	return 0
}

func (m *ConsolidatedDataReport) GetEtaStdAll() uint64 {
	if m != nil {
		return m.EtaStdAll
	}
	return 0
}

func (m *ConsolidatedDataReport) GetDepportScore() int32 {
	if m != nil {
		return m.DepportScore
	}
	return 0
}

func (m *ConsolidatedDataReport) GetDepport() string {
	if m != nil {
		return m.Depport
	}
	return ""
}

func (m *ConsolidatedDataReport) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*ConsolidatedDataReport)(nil), "vesseloracle.vesseloracle.ConsolidatedDataReport")
}

func init() {
	proto.RegisterFile("vesseloracle/vesseloracle/consolidated_data_report.proto", fileDescriptor_152666c309c33442)
}

var fileDescriptor_152666c309c33442 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbd, 0x4e, 0xeb, 0x40,
	0x10, 0x85, 0x63, 0xe7, 0xef, 0x66, 0xf3, 0x73, 0xa3, 0x2d, 0xae, 0xf6, 0x36, 0x2b, 0x87, 0x48,
	0xc8, 0x55, 0x28, 0x68, 0x90, 0xa8, 0x20, 0xb4, 0x08, 0xc9, 0xe9, 0x68, 0xac, 0xc1, 0x3b, 0x45,
	0xa4, 0x8d, 0xd7, 0xda, 0x1d, 0x10, 0xbc, 0x05, 0x8f, 0x45, 0x99, 0x92, 0x12, 0x25, 0x0f, 0xc0,
	0x2b, 0xa0, 0x5d, 0x3b, 0x28, 0xe9, 0x7c, 0xce, 0x7c, 0x73, 0xac, 0x9d, 0xc3, 0xae, 0x5e, 0xd0,
	0x39, 0xd4, 0xc6, 0x42, 0xa1, 0xf1, 0xe2, 0x44, 0x14, 0xa6, 0x74, 0x46, 0xaf, 0x15, 0x10, 0xaa,
	0x5c, 0x01, 0x41, 0x6e, 0xb1, 0x32, 0x96, 0x16, 0x95, 0x35, 0x64, 0xf8, 0xff, 0x63, 0x78, 0x71,
	0x2c, 0xce, 0xbe, 0x63, 0xf6, 0x6f, 0x79, 0xb4, 0x7d, 0x07, 0x04, 0x59, 0xd8, 0xe5, 0x53, 0xd6,
	0x5e, 0x6f, 0x8c, 0x88, 0x92, 0x28, 0x1d, 0x64, 0xfe, 0x93, 0x4f, 0x58, 0x4c, 0x4e, 0xc4, 0x49,
	0x94, 0x76, 0xb2, 0x98, 0x1c, 0x9f, 0xb3, 0x31, 0x19, 0x02, 0x9d, 0x3b, 0xd8, 0x54, 0x1a, 0x9d,
	0x68, 0x27, 0x51, 0xda, 0xcd, 0x46, 0xc1, 0x5c, 0xd5, 0x1e, 0x9f, 0xb1, 0x11, 0x12, 0xe4, 0xe6,
	0x99, 0xf4, 0x1a, 0xad, 0x13, 0x9d, 0xc0, 0x0c, 0x91, 0xe0, 0xa1, 0xb1, 0x78, 0xca, 0xa6, 0x1e,
	0xd9, 0x20, 0x94, 0x79, 0xa1, 0x11, 0x4a, 0x54, 0xa2, 0x1b, 0xfe, 0x32, 0x41, 0x82, 0x7b, 0x84,
	0x72, 0x59, 0xbb, 0x3c, 0xa9, 0xc3, 0x02, 0x09, 0x5a, 0x8b, 0x5e, 0xa0, 0x58, 0x43, 0xdd, 0x68,
	0xcd, 0xcf, 0xd9, 0x5f, 0x4f, 0x38, 0x52, 0xbf, 0x51, 0xfd, 0x00, 0x8d, 0x91, 0x60, 0x45, 0xea,
	0x90, 0x24, 0xd9, 0xf0, 0xc0, 0xf9, 0xa0, 0x3f, 0x81, 0x19, 0xd4, 0x8c, 0xcf, 0x99, 0xb3, 0xb1,
	0xc2, 0xca, 0x1f, 0x22, 0x77, 0x85, 0xb1, 0x28, 0x06, 0xf5, 0xdb, 0x1a, 0x73, 0xe5, 0x3d, 0x2e,
	0x58, 0xbf, 0xd1, 0x82, 0x85, 0x33, 0x1d, 0xa4, 0x9f, 0x14, 0x16, 0x81, 0x8c, 0x15, 0xc3, 0x7a,
	0xd2, 0xc8, 0xdb, 0xeb, 0x8f, 0x9d, 0x8c, 0xb6, 0x3b, 0x19, 0x7d, 0xed, 0x64, 0xf4, 0xbe, 0x97,
	0xad, 0xed, 0x5e, 0xb6, 0x3e, 0xf7, 0xb2, 0xf5, 0x38, 0x3b, 0xe9, 0xf4, 0xf5, 0xb4, 0x62, 0x7a,
	0xab, 0xd0, 0x3d, 0xf5, 0x42, 0xa1, 0x97, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x1f, 0x37,
	0xc6, 0x0c, 0x02, 0x00, 0x00,
}

func (m *ConsolidatedDataReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsolidatedDataReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsolidatedDataReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Depport) > 0 {
		i -= len(m.Depport)
		copy(dAtA[i:], m.Depport)
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(len(m.Depport)))
		i--
		dAtA[i] = 0x52
	}
	if m.DepportScore != 0 {
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(m.DepportScore))
		i--
		dAtA[i] = 0x48
	}
	if m.EtaStdAll != 0 {
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(m.EtaStdAll))
		i--
		dAtA[i] = 0x40
	}
	if m.EtaStdCleaned != 0 {
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(m.EtaStdCleaned))
		i--
		dAtA[i] = 0x38
	}
	if m.EtaMeanAll != 0 {
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(m.EtaMeanAll))
		i--
		dAtA[i] = 0x30
	}
	if m.EtaMeanCleaned != 0 {
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(m.EtaMeanCleaned))
		i--
		dAtA[i] = 0x28
	}
	if m.EtaOutliers != 0 {
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(m.EtaOutliers))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalSamples != 0 {
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(m.TotalSamples))
		i--
		dAtA[i] = 0x18
	}
	if m.Ts != 0 {
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Imo) > 0 {
		i -= len(m.Imo)
		copy(dAtA[i:], m.Imo)
		i = encodeVarintConsolidatedDataReport(dAtA, i, uint64(len(m.Imo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConsolidatedDataReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsolidatedDataReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConsolidatedDataReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imo)
	if l > 0 {
		n += 1 + l + sovConsolidatedDataReport(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovConsolidatedDataReport(uint64(m.Ts))
	}
	if m.TotalSamples != 0 {
		n += 1 + sovConsolidatedDataReport(uint64(m.TotalSamples))
	}
	if m.EtaOutliers != 0 {
		n += 1 + sovConsolidatedDataReport(uint64(m.EtaOutliers))
	}
	if m.EtaMeanCleaned != 0 {
		n += 1 + sovConsolidatedDataReport(uint64(m.EtaMeanCleaned))
	}
	if m.EtaMeanAll != 0 {
		n += 1 + sovConsolidatedDataReport(uint64(m.EtaMeanAll))
	}
	if m.EtaStdCleaned != 0 {
		n += 1 + sovConsolidatedDataReport(uint64(m.EtaStdCleaned))
	}
	if m.EtaStdAll != 0 {
		n += 1 + sovConsolidatedDataReport(uint64(m.EtaStdAll))
	}
	if m.DepportScore != 0 {
		n += 1 + sovConsolidatedDataReport(uint64(m.DepportScore))
	}
	l = len(m.Depport)
	if l > 0 {
		n += 1 + l + sovConsolidatedDataReport(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovConsolidatedDataReport(uint64(l))
	}
	return n
}

func sovConsolidatedDataReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsolidatedDataReport(x uint64) (n int) {
	return sovConsolidatedDataReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsolidatedDataReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsolidatedDataReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsolidatedDataReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsolidatedDataReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsolidatedDataReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsolidatedDataReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSamples", wireType)
			}
			m.TotalSamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSamples |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaOutliers", wireType)
			}
			m.EtaOutliers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaOutliers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaMeanCleaned", wireType)
			}
			m.EtaMeanCleaned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaMeanCleaned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaMeanAll", wireType)
			}
			m.EtaMeanAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaMeanAll |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaStdCleaned", wireType)
			}
			m.EtaStdCleaned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaStdCleaned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaStdAll", wireType)
			}
			m.EtaStdAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaStdAll |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepportScore", wireType)
			}
			m.DepportScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepportScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsolidatedDataReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsolidatedDataReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsolidatedDataReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsolidatedDataReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsolidatedDataReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsolidatedDataReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsolidatedDataReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsolidatedDataReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsolidatedDataReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsolidatedDataReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsolidatedDataReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsolidatedDataReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsolidatedDataReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsolidatedDataReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsolidatedDataReport = fmt.Errorf("proto: unexpected end of group")
)
