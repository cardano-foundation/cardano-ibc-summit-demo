// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vesseloracle/vesseloracle/vessel.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vessel struct {
	Imo      string `protobuf:"bytes,1,opt,name=imo,proto3" json:"imo,omitempty"`
	Ts       uint64 `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Source   string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Lat      int32  `protobuf:"varint,4,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon      int32  `protobuf:"varint,5,opt,name=lon,proto3" json:"lon,omitempty"`
	Speed    int32  `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`
	Course   int32  `protobuf:"varint,7,opt,name=course,proto3" json:"course,omitempty"`
	Heading  int32  `protobuf:"varint,8,opt,name=heading,proto3" json:"heading,omitempty"`
	Adt      uint64 `protobuf:"varint,9,opt,name=adt,proto3" json:"adt,omitempty"`
	Eta      uint64 `protobuf:"varint,10,opt,name=eta,proto3" json:"eta,omitempty"`
	Name     string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Destport string `protobuf:"bytes,12,opt,name=destport,proto3" json:"destport,omitempty"`
	Depport  string `protobuf:"bytes,13,opt,name=depport,proto3" json:"depport,omitempty"`
	Mmsi     string `protobuf:"bytes,14,opt,name=mmsi,proto3" json:"mmsi,omitempty"`
	Creator  string `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Vessel) Reset()         { *m = Vessel{} }
func (m *Vessel) String() string { return proto.CompactTextString(m) }
func (*Vessel) ProtoMessage()    {}
func (*Vessel) Descriptor() ([]byte, []int) {
	return fileDescriptor_65c6e3bb5a9cf684, []int{0}
}
func (m *Vessel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vessel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vessel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vessel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vessel.Merge(m, src)
}
func (m *Vessel) XXX_Size() int {
	return m.Size()
}
func (m *Vessel) XXX_DiscardUnknown() {
	xxx_messageInfo_Vessel.DiscardUnknown(m)
}

var xxx_messageInfo_Vessel proto.InternalMessageInfo

func (m *Vessel) GetImo() string {
	if m != nil {
		return m.Imo
	}
	return ""
}

func (m *Vessel) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *Vessel) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Vessel) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Vessel) GetLon() int32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Vessel) GetSpeed() int32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Vessel) GetCourse() int32 {
	if m != nil {
		return m.Course
	}
	return 0
}

func (m *Vessel) GetHeading() int32 {
	if m != nil {
		return m.Heading
	}
	return 0
}

func (m *Vessel) GetAdt() uint64 {
	if m != nil {
		return m.Adt
	}
	return 0
}

func (m *Vessel) GetEta() uint64 {
	if m != nil {
		return m.Eta
	}
	return 0
}

func (m *Vessel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vessel) GetDestport() string {
	if m != nil {
		return m.Destport
	}
	return ""
}

func (m *Vessel) GetDepport() string {
	if m != nil {
		return m.Depport
	}
	return ""
}

func (m *Vessel) GetMmsi() string {
	if m != nil {
		return m.Mmsi
	}
	return ""
}

func (m *Vessel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Vessel)(nil), "vesseloracle.vesseloracle.Vessel")
}

func init() {
	proto.RegisterFile("vesseloracle/vesseloracle/vessel.proto", fileDescriptor_65c6e3bb5a9cf684)
}

var fileDescriptor_65c6e3bb5a9cf684 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xeb, 0x34, 0x49, 0x5b, 0x03, 0x05, 0x59, 0x08, 0x1d, 0x0c, 0x56, 0x60, 0x40, 0x99,
	0xca, 0xc0, 0xc8, 0xc6, 0x23, 0x64, 0x60, 0x60, 0x33, 0xc9, 0x09, 0x22, 0x25, 0x71, 0x64, 0xbb,
	0x08, 0xde, 0x82, 0xc7, 0x42, 0x4c, 0x1d, 0x19, 0x51, 0xf2, 0x22, 0xc8, 0x97, 0x14, 0xb5, 0x12,
	0xdb, 0xff, 0x7d, 0x77, 0xf9, 0x63, 0xe9, 0xf8, 0xf5, 0x2b, 0x5a, 0x8b, 0x95, 0x36, 0x2a, 0xaf,
	0xf0, 0xe6, 0x1f, 0x58, 0xb5, 0x46, 0x3b, 0x2d, 0xce, 0x77, 0x47, 0xab, 0x5d, 0xb8, 0xfa, 0x0a,
	0x78, 0xfc, 0x40, 0x42, 0x9c, 0xf0, 0x69, 0x59, 0x6b, 0x60, 0x09, 0x4b, 0x17, 0x99, 0x8f, 0x62,
	0xc9, 0x03, 0x67, 0x21, 0x48, 0x58, 0x1a, 0x66, 0x81, 0xb3, 0xe2, 0x8c, 0xc7, 0x56, 0xaf, 0x4d,
	0x8e, 0x30, 0xa5, 0xa5, 0x91, 0xfc, 0x97, 0x95, 0x72, 0x10, 0x26, 0x2c, 0x8d, 0x32, 0x1f, 0xc9,
	0xe8, 0x06, 0xa2, 0xd1, 0xe8, 0x46, 0x9c, 0xf2, 0xc8, 0xb6, 0x88, 0x05, 0xc4, 0xe4, 0x06, 0xf0,
	0x8d, 0xb9, 0x5e, 0x1b, 0x8b, 0x30, 0x23, 0x3d, 0x92, 0x00, 0x3e, 0x7b, 0x41, 0x55, 0x94, 0xcd,
	0x33, 0xcc, 0x69, 0xb0, 0x45, 0xdf, 0xac, 0x0a, 0x07, 0x0b, 0x7a, 0x94, 0x8f, 0xde, 0xa0, 0x53,
	0xc0, 0x07, 0x83, 0x4e, 0x09, 0xc1, 0xc3, 0x46, 0xd5, 0x08, 0x07, 0xf4, 0x4a, 0xca, 0xe2, 0x82,
	0xcf, 0x0b, 0xb4, 0xae, 0xd5, 0xc6, 0xc1, 0x21, 0xf9, 0x3f, 0xf6, 0x7f, 0x2b, 0xb0, 0xa5, 0xd1,
	0x11, 0x8d, 0xb6, 0xe8, 0x9b, 0xea, 0xda, 0x96, 0xb0, 0x1c, 0x9a, 0x7c, 0xf6, 0xdb, 0xb9, 0x41,
	0xe5, 0xb4, 0x81, 0xe3, 0x61, 0x7b, 0xc4, 0xfb, 0xbb, 0xcf, 0x4e, 0xb2, 0x4d, 0x27, 0xd9, 0x4f,
	0x27, 0xd9, 0x47, 0x2f, 0x27, 0x9b, 0x5e, 0x4e, 0xbe, 0x7b, 0x39, 0x79, 0xbc, 0xdc, 0x3b, 0xce,
	0xdb, 0xfe, 0xad, 0xdc, 0x7b, 0x8b, 0xf6, 0x29, 0xa6, 0x5b, 0xdd, 0xfe, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xa5, 0xa4, 0x9b, 0x49, 0xd5, 0x01, 0x00, 0x00,
}

func (m *Vessel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vessel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vessel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintVessel(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Mmsi) > 0 {
		i -= len(m.Mmsi)
		copy(dAtA[i:], m.Mmsi)
		i = encodeVarintVessel(dAtA, i, uint64(len(m.Mmsi)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Depport) > 0 {
		i -= len(m.Depport)
		copy(dAtA[i:], m.Depport)
		i = encodeVarintVessel(dAtA, i, uint64(len(m.Depport)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Destport) > 0 {
		i -= len(m.Destport)
		copy(dAtA[i:], m.Destport)
		i = encodeVarintVessel(dAtA, i, uint64(len(m.Destport)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVessel(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Eta != 0 {
		i = encodeVarintVessel(dAtA, i, uint64(m.Eta))
		i--
		dAtA[i] = 0x50
	}
	if m.Adt != 0 {
		i = encodeVarintVessel(dAtA, i, uint64(m.Adt))
		i--
		dAtA[i] = 0x48
	}
	if m.Heading != 0 {
		i = encodeVarintVessel(dAtA, i, uint64(m.Heading))
		i--
		dAtA[i] = 0x40
	}
	if m.Course != 0 {
		i = encodeVarintVessel(dAtA, i, uint64(m.Course))
		i--
		dAtA[i] = 0x38
	}
	if m.Speed != 0 {
		i = encodeVarintVessel(dAtA, i, uint64(m.Speed))
		i--
		dAtA[i] = 0x30
	}
	if m.Lon != 0 {
		i = encodeVarintVessel(dAtA, i, uint64(m.Lon))
		i--
		dAtA[i] = 0x28
	}
	if m.Lat != 0 {
		i = encodeVarintVessel(dAtA, i, uint64(m.Lat))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintVessel(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ts != 0 {
		i = encodeVarintVessel(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Imo) > 0 {
		i -= len(m.Imo)
		copy(dAtA[i:], m.Imo)
		i = encodeVarintVessel(dAtA, i, uint64(len(m.Imo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVessel(dAtA []byte, offset int, v uint64) int {
	offset -= sovVessel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vessel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imo)
	if l > 0 {
		n += 1 + l + sovVessel(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovVessel(uint64(m.Ts))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovVessel(uint64(l))
	}
	if m.Lat != 0 {
		n += 1 + sovVessel(uint64(m.Lat))
	}
	if m.Lon != 0 {
		n += 1 + sovVessel(uint64(m.Lon))
	}
	if m.Speed != 0 {
		n += 1 + sovVessel(uint64(m.Speed))
	}
	if m.Course != 0 {
		n += 1 + sovVessel(uint64(m.Course))
	}
	if m.Heading != 0 {
		n += 1 + sovVessel(uint64(m.Heading))
	}
	if m.Adt != 0 {
		n += 1 + sovVessel(uint64(m.Adt))
	}
	if m.Eta != 0 {
		n += 1 + sovVessel(uint64(m.Eta))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVessel(uint64(l))
	}
	l = len(m.Destport)
	if l > 0 {
		n += 1 + l + sovVessel(uint64(l))
	}
	l = len(m.Depport)
	if l > 0 {
		n += 1 + l + sovVessel(uint64(l))
	}
	l = len(m.Mmsi)
	if l > 0 {
		n += 1 + l + sovVessel(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovVessel(uint64(l))
	}
	return n
}

func sovVessel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVessel(x uint64) (n int) {
	return sovVessel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vessel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVessel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vessel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vessel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVessel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVessel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVessel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVessel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			m.Lat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			m.Lon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
			m.Course = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Course |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heading", wireType)
			}
			m.Heading = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Heading |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adt", wireType)
			}
			m.Adt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Adt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eta", wireType)
			}
			m.Eta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eta |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVessel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVessel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVessel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVessel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVessel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVessel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mmsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVessel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVessel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mmsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVessel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVessel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVessel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVessel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVessel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVessel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVessel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVessel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVessel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVessel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVessel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVessel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVessel = fmt.Errorf("proto: unexpected end of group")
)
