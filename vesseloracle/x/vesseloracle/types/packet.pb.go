// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vesseloracle/vesseloracle/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VesseloraclePacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*VesseloraclePacketData_NoData
	//	*VesseloraclePacketData_ConsolidatedDataReportPacketPacket
	Packet isVesseloraclePacketData_Packet `protobuf_oneof:"packet"`
}

func (m *VesseloraclePacketData) Reset()         { *m = VesseloraclePacketData{} }
func (m *VesseloraclePacketData) String() string { return proto.CompactTextString(m) }
func (*VesseloraclePacketData) ProtoMessage()    {}
func (*VesseloraclePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7bbfccd07700cc2, []int{0}
}
func (m *VesseloraclePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VesseloraclePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VesseloraclePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VesseloraclePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VesseloraclePacketData.Merge(m, src)
}
func (m *VesseloraclePacketData) XXX_Size() int {
	return m.Size()
}
func (m *VesseloraclePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_VesseloraclePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_VesseloraclePacketData proto.InternalMessageInfo

type isVesseloraclePacketData_Packet interface {
	isVesseloraclePacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VesseloraclePacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type VesseloraclePacketData_ConsolidatedDataReportPacketPacket struct {
	ConsolidatedDataReportPacketPacket *ConsolidatedDataReportPacketPacketData `protobuf:"bytes,2,opt,name=consolidatedDataReportPacketPacket,proto3,oneof" json:"consolidatedDataReportPacketPacket,omitempty"`
}

func (*VesseloraclePacketData_NoData) isVesseloraclePacketData_Packet()                             {}
func (*VesseloraclePacketData_ConsolidatedDataReportPacketPacket) isVesseloraclePacketData_Packet() {}

func (m *VesseloraclePacketData) GetPacket() isVesseloraclePacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *VesseloraclePacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*VesseloraclePacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *VesseloraclePacketData) GetConsolidatedDataReportPacketPacket() *ConsolidatedDataReportPacketPacketData {
	if x, ok := m.GetPacket().(*VesseloraclePacketData_ConsolidatedDataReportPacketPacket); ok {
		return x.ConsolidatedDataReportPacketPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VesseloraclePacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VesseloraclePacketData_NoData)(nil),
		(*VesseloraclePacketData_ConsolidatedDataReportPacketPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7bbfccd07700cc2, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// ConsolidatedDataReportPacketPacketData defines a struct for the packet payload
type ConsolidatedDataReportPacketPacketData struct {
	Imo            string `protobuf:"bytes,1,opt,name=imo,proto3" json:"imo,omitempty"`
	Ts             uint64 `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	TotalSamples   int32  `protobuf:"varint,3,opt,name=totalSamples,proto3" json:"totalSamples,omitempty"`
	EtaOutliers    int32  `protobuf:"varint,4,opt,name=etaOutliers,proto3" json:"etaOutliers,omitempty"`
	EtaMeanCleaned uint64 `protobuf:"varint,5,opt,name=etaMeanCleaned,proto3" json:"etaMeanCleaned,omitempty"`
	EtaMeanAll     uint64 `protobuf:"varint,6,opt,name=etaMeanAll,proto3" json:"etaMeanAll,omitempty"`
	EtaStdCleaned  uint64 `protobuf:"varint,7,opt,name=etaStdCleaned,proto3" json:"etaStdCleaned,omitempty"`
	EtaStdAll      uint64 `protobuf:"varint,8,opt,name=etaStdAll,proto3" json:"etaStdAll,omitempty"`
	Depport        string `protobuf:"bytes,9,opt,name=depport,proto3" json:"depport,omitempty"`
	DepportScore   int32  `protobuf:"varint,10,opt,name=depportScore,proto3" json:"depportScore,omitempty"`
}

func (m *ConsolidatedDataReportPacketPacketData) Reset() {
	*m = ConsolidatedDataReportPacketPacketData{}
}
func (m *ConsolidatedDataReportPacketPacketData) String() string { return proto.CompactTextString(m) }
func (*ConsolidatedDataReportPacketPacketData) ProtoMessage()    {}
func (*ConsolidatedDataReportPacketPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7bbfccd07700cc2, []int{2}
}
func (m *ConsolidatedDataReportPacketPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsolidatedDataReportPacketPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsolidatedDataReportPacketPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsolidatedDataReportPacketPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsolidatedDataReportPacketPacketData.Merge(m, src)
}
func (m *ConsolidatedDataReportPacketPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ConsolidatedDataReportPacketPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsolidatedDataReportPacketPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ConsolidatedDataReportPacketPacketData proto.InternalMessageInfo

func (m *ConsolidatedDataReportPacketPacketData) GetImo() string {
	if m != nil {
		return m.Imo
	}
	return ""
}

func (m *ConsolidatedDataReportPacketPacketData) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *ConsolidatedDataReportPacketPacketData) GetTotalSamples() int32 {
	if m != nil {
		return m.TotalSamples
	}
	return 0
}

func (m *ConsolidatedDataReportPacketPacketData) GetEtaOutliers() int32 {
	if m != nil {
		return m.EtaOutliers
	}
	return 0
}

func (m *ConsolidatedDataReportPacketPacketData) GetEtaMeanCleaned() uint64 {
	if m != nil {
		return m.EtaMeanCleaned
	}
	return 0
}

func (m *ConsolidatedDataReportPacketPacketData) GetEtaMeanAll() uint64 {
	if m != nil {
		return m.EtaMeanAll
	}
	return 0
}

func (m *ConsolidatedDataReportPacketPacketData) GetEtaStdCleaned() uint64 {
	if m != nil {
		return m.EtaStdCleaned
	}
	return 0
}

func (m *ConsolidatedDataReportPacketPacketData) GetEtaStdAll() uint64 {
	if m != nil {
		return m.EtaStdAll
	}
	return 0
}

func (m *ConsolidatedDataReportPacketPacketData) GetDepport() string {
	if m != nil {
		return m.Depport
	}
	return ""
}

func (m *ConsolidatedDataReportPacketPacketData) GetDepportScore() int32 {
	if m != nil {
		return m.DepportScore
	}
	return 0
}

// ConsolidatedDataReportPacketPacketAck defines a struct for the packet acknowledgment
type ConsolidatedDataReportPacketPacketAck struct {
}

func (m *ConsolidatedDataReportPacketPacketAck) Reset()         { *m = ConsolidatedDataReportPacketPacketAck{} }
func (m *ConsolidatedDataReportPacketPacketAck) String() string { return proto.CompactTextString(m) }
func (*ConsolidatedDataReportPacketPacketAck) ProtoMessage()    {}
func (*ConsolidatedDataReportPacketPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7bbfccd07700cc2, []int{3}
}
func (m *ConsolidatedDataReportPacketPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsolidatedDataReportPacketPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsolidatedDataReportPacketPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsolidatedDataReportPacketPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsolidatedDataReportPacketPacketAck.Merge(m, src)
}
func (m *ConsolidatedDataReportPacketPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ConsolidatedDataReportPacketPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsolidatedDataReportPacketPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ConsolidatedDataReportPacketPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VesseloraclePacketData)(nil), "vesseloracle.vesseloracle.VesseloraclePacketData")
	proto.RegisterType((*NoData)(nil), "vesseloracle.vesseloracle.NoData")
	proto.RegisterType((*ConsolidatedDataReportPacketPacketData)(nil), "vesseloracle.vesseloracle.ConsolidatedDataReportPacketPacketData")
	proto.RegisterType((*ConsolidatedDataReportPacketPacketAck)(nil), "vesseloracle.vesseloracle.ConsolidatedDataReportPacketPacketAck")
}

func init() {
	proto.RegisterFile("vesseloracle/vesseloracle/packet.proto", fileDescriptor_f7bbfccd07700cc2)
}

var fileDescriptor_f7bbfccd07700cc2 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x6e, 0xe2, 0x40,
	0x10, 0xc6, 0xbd, 0x06, 0x0c, 0x0c, 0x77, 0xe8, 0xb4, 0xc5, 0x69, 0x4f, 0x3a, 0x59, 0x60, 0xdd,
	0x71, 0x54, 0x3e, 0x29, 0x29, 0xa9, 0x80, 0x14, 0x69, 0xf2, 0x47, 0x46, 0x4a, 0x91, 0x6e, 0x63,
	0x4f, 0x81, 0x58, 0xbc, 0x96, 0x77, 0x13, 0x25, 0x6f, 0x11, 0x29, 0x2f, 0x95, 0x92, 0x32, 0x4a,
	0x15, 0xc1, 0x33, 0xa4, 0x8f, 0xbc, 0x36, 0x8a, 0x1d, 0x29, 0x81, 0x06, 0xcd, 0xfc, 0xf8, 0xf6,
	0xfb, 0x3c, 0xa3, 0x81, 0xc1, 0x0d, 0x2a, 0x85, 0x42, 0xa6, 0x3c, 0x14, 0xf8, 0xbf, 0xd2, 0x24,
	0x3c, 0x5c, 0xa0, 0xf6, 0x93, 0x54, 0x6a, 0x49, 0x7f, 0x95, 0xff, 0xf2, 0xcb, 0x8d, 0xf7, 0x4a,
	0xe0, 0xe7, 0x45, 0x09, 0x9c, 0x9b, 0x77, 0x47, 0x5c, 0x73, 0x3a, 0x02, 0x27, 0x96, 0x59, 0xc5,
	0x48, 0x8f, 0x0c, 0x3b, 0x07, 0x7d, 0xff, 0x53, 0x1b, 0xff, 0xd4, 0x08, 0x8f, 0xad, 0xa0, 0x78,
	0x42, 0x1f, 0x08, 0x78, 0xa1, 0x8c, 0x95, 0x14, 0xf3, 0x88, 0x6b, 0x8c, 0x32, 0x18, 0x60, 0x22,
	0x53, 0x9d, 0x27, 0xe4, 0xbf, 0xcc, 0x36, 0xce, 0xe3, 0x2f, 0x9c, 0xa7, 0x3b, 0x4d, 0x8a, 0xe4,
	0x3d, 0xe2, 0x26, 0x2d, 0x70, 0xf2, 0xc5, 0x78, 0x2d, 0x70, 0xf2, 0x6f, 0xf6, 0x9e, 0x6d, 0x18,
	0xec, 0x17, 0x42, 0x7f, 0x40, 0x6d, 0xbe, 0x94, 0x66, 0x1d, 0xed, 0x20, 0x2b, 0x69, 0x17, 0x6c,
	0xad, 0xcc, 0x14, 0xf5, 0xc0, 0xd6, 0x8a, 0x7a, 0xf0, 0x4d, 0x4b, 0xcd, 0xc5, 0x8c, 0x2f, 0x13,
	0x81, 0x8a, 0xd5, 0x7a, 0x64, 0xd8, 0x08, 0x2a, 0x8c, 0xf6, 0xa0, 0x83, 0x9a, 0x9f, 0x5d, 0x6b,
	0x31, 0xc7, 0x54, 0xb1, 0xba, 0x91, 0x94, 0x11, 0x1d, 0x40, 0x17, 0x35, 0x3f, 0x41, 0x1e, 0x4f,
	0x05, 0xf2, 0x18, 0x23, 0xd6, 0x30, 0x09, 0x1f, 0x28, 0x75, 0x01, 0x0a, 0x32, 0x16, 0x82, 0x39,
	0x46, 0x53, 0x22, 0xf4, 0x0f, 0x7c, 0x47, 0xcd, 0x67, 0x3a, 0xda, 0xda, 0x34, 0x8d, 0xa4, 0x0a,
	0xe9, 0x6f, 0x68, 0xe7, 0x20, 0x33, 0x69, 0x19, 0xc5, 0x3b, 0xa0, 0x0c, 0x9a, 0x11, 0x26, 0xd9,
	0x3a, 0x58, 0xdb, 0xcc, 0xbd, 0x6d, 0xb3, 0x59, 0x8b, 0x72, 0x16, 0xca, 0x14, 0x19, 0xe4, 0xb3,
	0x96, 0x99, 0xf7, 0x0f, 0xfe, 0xee, 0xde, 0xed, 0x38, 0x5c, 0x4c, 0x46, 0x8f, 0x6b, 0x97, 0xac,
	0xd6, 0x2e, 0x79, 0x59, 0xbb, 0xe4, 0x7e, 0xe3, 0x5a, 0xab, 0x8d, 0x6b, 0x3d, 0x6d, 0x5c, 0xeb,
	0xb2, 0x5f, 0xb9, 0xeb, 0xdb, 0xea, 0x99, 0xeb, 0xbb, 0x04, 0xd5, 0x95, 0x63, 0xce, 0xfc, 0xf0,
	0x2d, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x31, 0x80, 0xf0, 0x10, 0x03, 0x00, 0x00,
}

func (m *VesseloraclePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VesseloraclePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VesseloraclePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VesseloraclePacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VesseloraclePacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *VesseloraclePacketData_ConsolidatedDataReportPacketPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VesseloraclePacketData_ConsolidatedDataReportPacketPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConsolidatedDataReportPacketPacket != nil {
		{
			size, err := m.ConsolidatedDataReportPacketPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConsolidatedDataReportPacketPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsolidatedDataReportPacketPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsolidatedDataReportPacketPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepportScore != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.DepportScore))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Depport) > 0 {
		i -= len(m.Depport)
		copy(dAtA[i:], m.Depport)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Depport)))
		i--
		dAtA[i] = 0x4a
	}
	if m.EtaStdAll != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.EtaStdAll))
		i--
		dAtA[i] = 0x40
	}
	if m.EtaStdCleaned != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.EtaStdCleaned))
		i--
		dAtA[i] = 0x38
	}
	if m.EtaMeanAll != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.EtaMeanAll))
		i--
		dAtA[i] = 0x30
	}
	if m.EtaMeanCleaned != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.EtaMeanCleaned))
		i--
		dAtA[i] = 0x28
	}
	if m.EtaOutliers != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.EtaOutliers))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalSamples != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.TotalSamples))
		i--
		dAtA[i] = 0x18
	}
	if m.Ts != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Imo) > 0 {
		i -= len(m.Imo)
		copy(dAtA[i:], m.Imo)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Imo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsolidatedDataReportPacketPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsolidatedDataReportPacketPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsolidatedDataReportPacketPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VesseloraclePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *VesseloraclePacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *VesseloraclePacketData_ConsolidatedDataReportPacketPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsolidatedDataReportPacketPacket != nil {
		l = m.ConsolidatedDataReportPacketPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConsolidatedDataReportPacketPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imo)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovPacket(uint64(m.Ts))
	}
	if m.TotalSamples != 0 {
		n += 1 + sovPacket(uint64(m.TotalSamples))
	}
	if m.EtaOutliers != 0 {
		n += 1 + sovPacket(uint64(m.EtaOutliers))
	}
	if m.EtaMeanCleaned != 0 {
		n += 1 + sovPacket(uint64(m.EtaMeanCleaned))
	}
	if m.EtaMeanAll != 0 {
		n += 1 + sovPacket(uint64(m.EtaMeanAll))
	}
	if m.EtaStdCleaned != 0 {
		n += 1 + sovPacket(uint64(m.EtaStdCleaned))
	}
	if m.EtaStdAll != 0 {
		n += 1 + sovPacket(uint64(m.EtaStdAll))
	}
	l = len(m.Depport)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.DepportScore != 0 {
		n += 1 + sovPacket(uint64(m.DepportScore))
	}
	return n
}

func (m *ConsolidatedDataReportPacketPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VesseloraclePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VesseloraclePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VesseloraclePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &VesseloraclePacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsolidatedDataReportPacketPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConsolidatedDataReportPacketPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &VesseloraclePacketData_ConsolidatedDataReportPacketPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsolidatedDataReportPacketPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsolidatedDataReportPacketPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsolidatedDataReportPacketPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSamples", wireType)
			}
			m.TotalSamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSamples |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaOutliers", wireType)
			}
			m.EtaOutliers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaOutliers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaMeanCleaned", wireType)
			}
			m.EtaMeanCleaned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaMeanCleaned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaMeanAll", wireType)
			}
			m.EtaMeanAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaMeanAll |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaStdCleaned", wireType)
			}
			m.EtaStdCleaned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaStdCleaned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtaStdAll", wireType)
			}
			m.EtaStdAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtaStdAll |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepportScore", wireType)
			}
			m.DepportScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepportScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsolidatedDataReportPacketPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsolidatedDataReportPacketPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsolidatedDataReportPacketPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
