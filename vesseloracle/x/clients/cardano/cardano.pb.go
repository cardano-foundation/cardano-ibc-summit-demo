// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/clients/cardano/v1/cardano.proto

package cardano

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Height struct {
	// the revision that the client is currently on
	RevisionNumber uint64 `protobuf:"varint,1,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	// the height within the given revision
	RevisionHeight uint64 `protobuf:"varint,2,opt,name=revision_height,json=revisionHeight,proto3" json:"revision_height,omitempty"`
}

func (m *Height) Reset()      { *m = Height{} }
func (*Height) ProtoMessage() {}
func (*Height) Descriptor() ([]byte, []int) {
	return fileDescriptor_6253eb15f6437c2d, []int{0}
}
func (m *Height) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Height) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Height.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Height) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Height.Merge(m, src)
}
func (m *Height) XXX_Size() int {
	return m.Size()
}
func (m *Height) XXX_DiscardUnknown() {
	xxx_messageInfo_Height.DiscardUnknown(m)
}

var xxx_messageInfo_Height proto.InternalMessageInfo

// ConsensusState defines the consensus state from Tendermint.
type ConsensusState struct {
	// timestamp that corresponds to the block height in which the ConsensusState
	// was stored. Will be Chain start time + slot, unit: seconds
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Slot at consensus height
	Slot uint64 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6253eb15f6437c2d, []int{1}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

type Validator struct {
	// vrf key hash of pool operator
	VrfKeyHash string `protobuf:"bytes,1,opt,name=vrf_key_hash,json=vrfKeyHash,proto3" json:"vrf_key_hash,omitempty"`
	// pool id of operator
	PoolId string `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_6253eb15f6437c2d, []int{2}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

type BlockData struct {
	// Block number
	Height *Height `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	// Slot number
	Slot uint64 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Block hash
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hash of previous block
	PrevHash string `protobuf:"bytes,4,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	// Epoch number
	EpochNo uint64 `protobuf:"varint,5,opt,name=epoch_no,json=epochNo,proto3" json:"epoch_no,omitempty"`
	// Hex string of block header to cbor
	HeaderCbor string `protobuf:"bytes,6,opt,name=header_cbor,json=headerCbor,proto3" json:"header_cbor,omitempty"`
	// Hex string of block txs to cbor
	BodyCbor string `protobuf:"bytes,7,opt,name=body_cbor,json=bodyCbor,proto3" json:"body_cbor,omitempty"`
	// Hex string of current epoch's epoch nonce, calculated at the start of each epoch,
	// calculated by evolving nonce of block inside epoch and last block nonce of prev block
	// Used to construct vrf value, also to verify slot leader is valid
	EpochNonce string `protobuf:"bytes,8,opt,name=epoch_nonce,json=epochNonce,proto3" json:"epoch_nonce,omitempty"`
	// Time stamp of current block, unit: seconds
	Timestamp uint64 `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Chain id
	ChainId string `protobuf:"bytes,10,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *BlockData) Reset()         { *m = BlockData{} }
func (m *BlockData) String() string { return proto.CompactTextString(m) }
func (*BlockData) ProtoMessage()    {}
func (*BlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6253eb15f6437c2d, []int{3}
}
func (m *BlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockData.Merge(m, src)
}
func (m *BlockData) XXX_Size() int {
	return m.Size()
}
func (m *BlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockData.DiscardUnknown(m)
}

var xxx_messageInfo_BlockData proto.InternalMessageInfo

type TokenConfigs struct {
	// IBC handler token uint (policyID + name), in hex format
	HandlerTokenUnit string `protobuf:"bytes,1,opt,name=handler_token_unit,json=handlerTokenUnit,proto3" json:"handler_token_unit,omitempty"`
	// IBC client token policyID, in hex format
	ClientPolicyId string `protobuf:"bytes,2,opt,name=client_policy_id,json=clientPolicyId,proto3" json:"client_policy_id,omitempty"`
	// IBC connection token policyID, in hex format
	ConnectionPolicyId string `protobuf:"bytes,3,opt,name=connection_policy_id,json=connectionPolicyId,proto3" json:"connection_policy_id,omitempty"`
	// IBC channel token policyID, in hex format
	ChannelPolicyId string `protobuf:"bytes,4,opt,name=channel_policy_id,json=channelPolicyId,proto3" json:"channel_policy_id,omitempty"`
}

func (m *TokenConfigs) Reset()         { *m = TokenConfigs{} }
func (m *TokenConfigs) String() string { return proto.CompactTextString(m) }
func (*TokenConfigs) ProtoMessage()    {}
func (*TokenConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6253eb15f6437c2d, []int{4}
}
func (m *TokenConfigs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenConfigs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenConfigs.Merge(m, src)
}
func (m *TokenConfigs) XXX_Size() int {
	return m.Size()
}
func (m *TokenConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_TokenConfigs proto.InternalMessageInfo

type ClientState struct {
	// Chain id
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Latest height the client was updated to
	LatestHeight *Height `protobuf:"bytes,2,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
	// Block height when the client was frozen due to a misbehaviour
	FrozenHeight *Height `protobuf:"bytes,3,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
	// To support finality, this state will be mark as finality after `valid_after` slots, default 0, unit: slot
	ValidAfter uint64 `protobuf:"varint,4,opt,name=valid_after,json=validAfter,proto3" json:"valid_after,omitempty"`
	// Time when chain start, unit: seconds
	GenesisTime uint64 `protobuf:"varint,5,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	// Epoch number of current chain state
	CurrentEpoch uint64 `protobuf:"varint,6,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	// Number of slots of this current epoch
	EpochLength uint64 `protobuf:"varint,7,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	// Number of slots of per KES period
	SlotPerKesPeriod uint64 `protobuf:"varint,8,opt,name=slot_per_kes_period,json=slotPerKesPeriod,proto3" json:"slot_per_kes_period,omitempty"`
	// Current epoch validator set
	CurrentValidatorSet []*Validator `protobuf:"bytes,9,rep,name=current_validator_set,json=currentValidatorSet,proto3" json:"current_validator_set,omitempty"`
	// Next epoch validator set
	NextValidatorSet []*Validator `protobuf:"bytes,10,rep,name=next_validator_set,json=nextValidatorSet,proto3" json:"next_validator_set,omitempty"`
	TrustingPeriod   uint64       `protobuf:"varint,11,opt,name=trusting_period,json=trustingPeriod,proto3" json:"trusting_period,omitempty"`
	// Path at which next upgraded client will be committed.
	UpgradePath []string `protobuf:"bytes,12,rep,name=upgrade_path,json=upgradePath,proto3" json:"upgrade_path,omitempty"`
	// IBC related auth token policy configs
	TokenConfigs *TokenConfigs `protobuf:"bytes,13,opt,name=token_configs,json=tokenConfigs,proto3" json:"token_configs,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6253eb15f6437c2d, []int{5}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

type Misbehaviour struct {
	// ClientID is deprecated
	ClientId   string     `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // Deprecated: Do not use.
	BlockData1 *BlockData `protobuf:"bytes,2,opt,name=block_data_1,json=blockData1,proto3" json:"block_data_1,omitempty"`
	BlockData2 *BlockData `protobuf:"bytes,3,opt,name=block_data_2,json=blockData2,proto3" json:"block_data_2,omitempty"`
}

func (m *Misbehaviour) Reset()         { *m = Misbehaviour{} }
func (m *Misbehaviour) String() string { return proto.CompactTextString(m) }
func (*Misbehaviour) ProtoMessage()    {}
func (*Misbehaviour) Descriptor() ([]byte, []int) {
	return fileDescriptor_6253eb15f6437c2d, []int{6}
}
func (m *Misbehaviour) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Misbehaviour) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Misbehaviour.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Misbehaviour) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Misbehaviour.Merge(m, src)
}
func (m *Misbehaviour) XXX_Size() int {
	return m.Size()
}
func (m *Misbehaviour) XXX_DiscardUnknown() {
	xxx_messageInfo_Misbehaviour.DiscardUnknown(m)
}

var xxx_messageInfo_Misbehaviour proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Height)(nil), "ibc.clients.cardano.v1.Height")
	proto.RegisterType((*ConsensusState)(nil), "ibc.clients.cardano.v1.ConsensusState")
	proto.RegisterType((*Validator)(nil), "ibc.clients.cardano.v1.Validator")
	proto.RegisterType((*BlockData)(nil), "ibc.clients.cardano.v1.BlockData")
	proto.RegisterType((*TokenConfigs)(nil), "ibc.clients.cardano.v1.TokenConfigs")
	proto.RegisterType((*ClientState)(nil), "ibc.clients.cardano.v1.ClientState")
	proto.RegisterType((*Misbehaviour)(nil), "ibc.clients.cardano.v1.Misbehaviour")
}

func init() {
	proto.RegisterFile("ibc/clients/cardano/v1/cardano.proto", fileDescriptor_6253eb15f6437c2d)
}

var fileDescriptor_6253eb15f6437c2d = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xb7, 0x13, 0xd7, 0xf1, 0x3e, 0xaf, 0x93, 0x30, 0x2d, 0xe0, 0x02, 0xb2, 0x93, 0x50, 0xa9,
	0x11, 0x02, 0x9b, 0x18, 0x09, 0xa1, 0xde, 0x88, 0x41, 0x4a, 0xd4, 0x52, 0xa2, 0x4d, 0xcb, 0x81,
	0xcb, 0x6a, 0x76, 0xf7, 0xd9, 0x3b, 0xca, 0x66, 0xc6, 0x9a, 0x19, 0xaf, 0x1a, 0x3e, 0x01, 0x47,
	0x8e, 0x1c, 0xfb, 0x19, 0xf8, 0x06, 0xdc, 0x10, 0xa7, 0x1e, 0x39, 0x01, 0x4a, 0xbe, 0x08, 0x9a,
	0x3f, 0xeb, 0x38, 0x56, 0x23, 0xda, 0xd3, 0xce, 0xfc, 0xde, 0x7b, 0xbf, 0x99, 0xf7, 0xde, 0xef,
	0xcd, 0xc2, 0x03, 0x96, 0xa4, 0xc3, 0xb4, 0x60, 0xc8, 0xb5, 0x1a, 0xa6, 0x54, 0x66, 0x94, 0x8b,
	0x61, 0x79, 0x50, 0x2d, 0x07, 0x33, 0x29, 0xb4, 0x20, 0xef, 0xb1, 0x24, 0x1d, 0x78, 0xaf, 0x41,
	0x65, 0x2a, 0x0f, 0x3e, 0xb8, 0x37, 0x15, 0x53, 0x61, 0x5d, 0x86, 0x66, 0xe5, 0xbc, 0xf7, 0x32,
	0x68, 0x1e, 0x21, 0x9b, 0xe6, 0x9a, 0x3c, 0x84, 0x2d, 0x89, 0x25, 0x53, 0x4c, 0xf0, 0x98, 0xcf,
	0xcf, 0x13, 0x94, 0xdd, 0xfa, 0x4e, 0x7d, 0xbf, 0x11, 0x6d, 0x56, 0xf0, 0x53, 0x8b, 0xde, 0x70,
	0xcc, 0x6d, 0x6c, 0x77, 0xed, 0xa6, 0xa3, 0x63, 0x7c, 0xd4, 0xfa, 0xf9, 0x65, 0xbf, 0xf6, 0xeb,
	0xcb, 0x7e, 0x6d, 0xef, 0x08, 0x36, 0xc7, 0x82, 0x2b, 0xe4, 0x6a, 0xae, 0x4e, 0x35, 0xd5, 0x48,
	0x3e, 0x82, 0x40, 0xb3, 0x73, 0x54, 0x9a, 0x9e, 0xcf, 0xfc, 0x39, 0xd7, 0x00, 0x21, 0xd0, 0x50,
	0x85, 0xa8, 0x78, 0xed, 0xfa, 0x51, 0xc3, 0xb0, 0xed, 0x3d, 0x81, 0xe0, 0x07, 0x5a, 0xb0, 0x8c,
	0x6a, 0x21, 0xc9, 0x0e, 0x84, 0xa5, 0x9c, 0xc4, 0x67, 0x78, 0x11, 0xe7, 0x54, 0xe5, 0x96, 0x27,
	0x88, 0xa0, 0x94, 0x93, 0xc7, 0x78, 0x71, 0x44, 0x55, 0x4e, 0xde, 0x87, 0x8d, 0x99, 0x10, 0x45,
	0xcc, 0x32, 0xcb, 0x15, 0x44, 0x4d, 0xb3, 0x3d, 0xce, 0x3c, 0xdb, 0xef, 0x6b, 0x10, 0x1c, 0x16,
	0x22, 0x3d, 0xfb, 0x86, 0x6a, 0x4a, 0xbe, 0x84, 0xa6, 0xcf, 0xc7, 0x10, 0xb5, 0x47, 0xbd, 0xc1,
	0xeb, 0x4b, 0x39, 0x70, 0xf9, 0x45, 0xde, 0xfb, 0x75, 0xb7, 0x35, 0x98, 0xbd, 0xd2, 0xba, 0x3d,
	0xd5, 0xae, 0xc9, 0x87, 0x10, 0xcc, 0x24, 0x96, 0xee, 0xae, 0x0d, 0x6b, 0x68, 0x19, 0xc0, 0xde,
	0xf4, 0x3e, 0xb4, 0x70, 0x26, 0xd2, 0x3c, 0xe6, 0xa2, 0x7b, 0xc7, 0x12, 0x6d, 0xd8, 0xfd, 0x53,
	0x41, 0xfa, 0xd0, 0xce, 0x91, 0x66, 0x28, 0xe3, 0x34, 0x11, 0xb2, 0xdb, 0x74, 0x59, 0x3a, 0x68,
	0x9c, 0x08, 0x69, 0x88, 0x13, 0x91, 0x5d, 0x38, 0xf3, 0x86, 0x23, 0x36, 0x80, 0x35, 0xf6, 0xa1,
	0x5d, 0x11, 0xf3, 0x14, 0xbb, 0x2d, 0x17, 0xed, 0xb9, 0x79, 0xba, 0xd2, 0x8a, 0x60, 0xb5, 0x15,
	0xf7, 0xa1, 0x95, 0xe6, 0x94, 0x71, 0x53, 0x42, 0xb0, 0xb1, 0x1b, 0x76, 0xbf, 0xa8, 0xe1, 0x9f,
	0x75, 0x08, 0x9f, 0x89, 0x33, 0xe4, 0x63, 0xc1, 0x27, 0x6c, 0xaa, 0xc8, 0xa7, 0x40, 0x72, 0xca,
	0xb3, 0x02, 0x65, 0xac, 0x0d, 0x1e, 0xcf, 0x39, 0xd3, 0xbe, 0x37, 0xdb, 0xde, 0x62, 0x03, 0x9e,
	0x73, 0xa6, 0xc9, 0x3e, 0x6c, 0xbb, 0x0a, 0xc7, 0x33, 0x51, 0xb0, 0xf4, 0xe2, 0xba, 0x55, 0x9b,
	0x0e, 0x3f, 0xb1, 0xf0, 0x71, 0x46, 0x3e, 0x87, 0x7b, 0xa9, 0xe0, 0x1c, 0x53, 0x6d, 0x94, 0x77,
	0xed, 0xed, 0x4a, 0x4c, 0xae, 0x6d, 0x8b, 0x88, 0x4f, 0xe0, 0x9d, 0x34, 0xa7, 0x9c, 0x63, 0xb1,
	0xe4, 0xee, 0x0a, 0xbf, 0xe5, 0x0d, 0x95, 0xaf, 0x4f, 0xe6, 0xb7, 0x3b, 0xd0, 0x1e, 0xdb, 0x63,
	0x9d, 0x4c, 0x97, 0xb3, 0xaf, 0xdf, 0xc8, 0x9e, 0x8c, 0xa1, 0x53, 0x50, 0x8d, 0x4a, 0x2f, 0x0f,
	0xc1, 0xff, 0x8b, 0x26, 0x74, 0x41, 0x7e, 0xe8, 0xc6, 0xd0, 0x99, 0x48, 0xf1, 0x13, 0x2e, 0x26,
	0x69, 0xfd, 0xcd, 0x48, 0x5c, 0x90, 0x27, 0xe9, 0x43, 0xbb, 0x34, 0x33, 0x11, 0xd3, 0x89, 0x46,
	0x69, 0x13, 0x6c, 0x44, 0x60, 0xa1, 0xaf, 0x0d, 0x42, 0x76, 0x21, 0x9c, 0x22, 0x47, 0xc5, 0x54,
	0x6c, 0x1a, 0xeb, 0xf5, 0xd5, 0xf6, 0xd8, 0x33, 0x76, 0x8e, 0xe4, 0x63, 0xe8, 0xa4, 0x73, 0x29,
	0x4d, 0x1f, 0xac, 0x34, 0xac, 0xca, 0x1a, 0x51, 0xe8, 0xc1, 0x6f, 0x0d, 0x66, 0x78, 0x9c, 0x94,
	0x0a, 0xe4, 0x53, 0x9d, 0x5b, 0xa9, 0x35, 0x22, 0x27, 0xaf, 0x27, 0x16, 0x22, 0x9f, 0xc1, 0x5d,
	0xa3, 0xff, 0x78, 0x86, 0x32, 0x3e, 0x43, 0x65, 0xbe, 0x4c, 0x64, 0x56, 0x75, 0x8d, 0x68, 0xdb,
	0x98, 0x4e, 0x50, 0x3e, 0x46, 0x75, 0x62, 0x71, 0xf2, 0x1c, 0xde, 0xad, 0x8e, 0x2d, 0xab, 0xb1,
	0x8e, 0x15, 0xea, 0x6e, 0xb0, 0xb3, 0xbe, 0xdf, 0x1e, 0xed, 0xde, 0x56, 0x87, 0xc5, 0x1b, 0x10,
	0xdd, 0xf5, 0xf1, 0x0b, 0xe4, 0x14, 0x35, 0xf9, 0x1e, 0x08, 0xc7, 0x17, 0xab, 0x9c, 0xf0, 0xa6,
	0x9c, 0xdb, 0x26, 0xf8, 0x06, 0xe1, 0x43, 0xd8, 0xd2, 0x72, 0xae, 0x34, 0xe3, 0xd3, 0x2a, 0xa5,
	0xb6, 0x7b, 0xf3, 0x2a, 0xd8, 0x27, 0xb4, 0x0b, 0xe1, 0x7c, 0x36, 0x95, 0x34, 0xc3, 0x78, 0x46,
	0x75, 0xde, 0x0d, 0x77, 0xd6, 0xf7, 0x83, 0xa8, 0xed, 0xb1, 0x13, 0xaa, 0x73, 0x72, 0x0c, 0x1d,
	0x37, 0x17, 0xa9, 0x1b, 0x98, 0x6e, 0xc7, 0xf6, 0xfc, 0xc1, 0x6d, 0xf7, 0x5a, 0x1e, 0xae, 0x28,
	0xd4, 0x4b, 0x3b, 0x2f, 0xda, 0x7f, 0xea, 0x10, 0x7e, 0xc7, 0x54, 0x82, 0x39, 0x2d, 0x99, 0x98,
	0x9b, 0x91, 0x0f, 0xfc, 0x4c, 0x55, 0xb2, 0x3d, 0x5c, 0xeb, 0xd6, 0xa3, 0x96, 0x03, 0x8f, 0x33,
	0x72, 0x0a, 0x61, 0x62, 0x9e, 0xbd, 0x38, 0xa3, 0x9a, 0xc6, 0x07, 0x5e, 0xba, 0xb7, 0x56, 0x66,
	0xf1, 0x44, 0x1e, 0x6e, 0x5e, 0xfe, 0xdd, 0x87, 0xc5, 0xf6, 0x20, 0x82, 0x64, 0xb1, 0x5e, 0x21,
	0x1d, 0x79, 0x29, 0xbf, 0x35, 0xe9, 0x68, 0x89, 0x74, 0xe4, 0x32, 0x3c, 0xfc, 0xea, 0x8f, 0xcb,
	0x5e, 0xfd, 0xd5, 0x65, 0xaf, 0xfe, 0xef, 0x65, 0xaf, 0xfe, 0xcb, 0x55, 0xaf, 0xf6, 0xea, 0xaa,
	0x57, 0xfb, 0xeb, 0xaa, 0x57, 0xfb, 0xb1, 0x57, 0xa2, 0x52, 0x58, 0x08, 0x49, 0xd3, 0x02, 0x87,
	0x2f, 0x56, 0x7f, 0x8f, 0x49, 0xd3, 0xfe, 0xe6, 0xbe, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xeb,
	0x8b, 0x44, 0x67, 0x3c, 0x07, 0x00, 0x00,
}

func (m *Height) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Height) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Height) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevisionHeight != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.RevisionHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.RevisionNumber != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.RevisionNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VrfKeyHash) > 0 {
		i -= len(m.VrfKeyHash)
		copy(dAtA[i:], m.VrfKeyHash)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.VrfKeyHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x52
	}
	if m.Timestamp != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x48
	}
	if len(m.EpochNonce) > 0 {
		i -= len(m.EpochNonce)
		copy(dAtA[i:], m.EpochNonce)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.EpochNonce)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BodyCbor) > 0 {
		i -= len(m.BodyCbor)
		copy(dAtA[i:], m.BodyCbor)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.BodyCbor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HeaderCbor) > 0 {
		i -= len(m.HeaderCbor)
		copy(dAtA[i:], m.HeaderCbor)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.HeaderCbor)))
		i--
		dAtA[i] = 0x32
	}
	if m.EpochNo != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.EpochNo))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PrevHash) > 0 {
		i -= len(m.PrevHash)
		copy(dAtA[i:], m.PrevHash)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.PrevHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Slot != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != nil {
		{
			size, err := m.Height.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCardano(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenConfigs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenConfigs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelPolicyId) > 0 {
		i -= len(m.ChannelPolicyId)
		copy(dAtA[i:], m.ChannelPolicyId)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.ChannelPolicyId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionPolicyId) > 0 {
		i -= len(m.ConnectionPolicyId)
		copy(dAtA[i:], m.ConnectionPolicyId)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.ConnectionPolicyId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientPolicyId) > 0 {
		i -= len(m.ClientPolicyId)
		copy(dAtA[i:], m.ClientPolicyId)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.ClientPolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HandlerTokenUnit) > 0 {
		i -= len(m.HandlerTokenUnit)
		copy(dAtA[i:], m.HandlerTokenUnit)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.HandlerTokenUnit)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenConfigs != nil {
		{
			size, err := m.TokenConfigs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCardano(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UpgradePath) > 0 {
		for iNdEx := len(m.UpgradePath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpgradePath[iNdEx])
			copy(dAtA[i:], m.UpgradePath[iNdEx])
			i = encodeVarintCardano(dAtA, i, uint64(len(m.UpgradePath[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.TrustingPeriod != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.TrustingPeriod))
		i--
		dAtA[i] = 0x58
	}
	if len(m.NextValidatorSet) > 0 {
		for iNdEx := len(m.NextValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NextValidatorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCardano(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.CurrentValidatorSet) > 0 {
		for iNdEx := len(m.CurrentValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentValidatorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCardano(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.SlotPerKesPeriod != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.SlotPerKesPeriod))
		i--
		dAtA[i] = 0x40
	}
	if m.EpochLength != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x38
	}
	if m.CurrentEpoch != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.GenesisTime != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.GenesisTime))
		i--
		dAtA[i] = 0x28
	}
	if m.ValidAfter != 0 {
		i = encodeVarintCardano(dAtA, i, uint64(m.ValidAfter))
		i--
		dAtA[i] = 0x20
	}
	if m.FrozenHeight != nil {
		{
			size, err := m.FrozenHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCardano(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LatestHeight != nil {
		{
			size, err := m.LatestHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCardano(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Misbehaviour) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Misbehaviour) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Misbehaviour) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockData2 != nil {
		{
			size, err := m.BlockData2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCardano(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockData1 != nil {
		{
			size, err := m.BlockData1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCardano(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintCardano(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCardano(dAtA []byte, offset int, v uint64) int {
	offset -= sovCardano(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Height) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevisionNumber != 0 {
		n += 1 + sovCardano(uint64(m.RevisionNumber))
	}
	if m.RevisionHeight != 0 {
		n += 1 + sovCardano(uint64(m.RevisionHeight))
	}
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovCardano(uint64(m.Timestamp))
	}
	if m.Slot != 0 {
		n += 1 + sovCardano(uint64(m.Slot))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VrfKeyHash)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	return n
}

func (m *BlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != nil {
		l = m.Height.Size()
		n += 1 + l + sovCardano(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovCardano(uint64(m.Slot))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	l = len(m.PrevHash)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	if m.EpochNo != 0 {
		n += 1 + sovCardano(uint64(m.EpochNo))
	}
	l = len(m.HeaderCbor)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	l = len(m.BodyCbor)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	l = len(m.EpochNonce)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovCardano(uint64(m.Timestamp))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	return n
}

func (m *TokenConfigs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HandlerTokenUnit)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	l = len(m.ClientPolicyId)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	l = len(m.ConnectionPolicyId)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	l = len(m.ChannelPolicyId)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	return n
}

func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	if m.LatestHeight != nil {
		l = m.LatestHeight.Size()
		n += 1 + l + sovCardano(uint64(l))
	}
	if m.FrozenHeight != nil {
		l = m.FrozenHeight.Size()
		n += 1 + l + sovCardano(uint64(l))
	}
	if m.ValidAfter != 0 {
		n += 1 + sovCardano(uint64(m.ValidAfter))
	}
	if m.GenesisTime != 0 {
		n += 1 + sovCardano(uint64(m.GenesisTime))
	}
	if m.CurrentEpoch != 0 {
		n += 1 + sovCardano(uint64(m.CurrentEpoch))
	}
	if m.EpochLength != 0 {
		n += 1 + sovCardano(uint64(m.EpochLength))
	}
	if m.SlotPerKesPeriod != 0 {
		n += 1 + sovCardano(uint64(m.SlotPerKesPeriod))
	}
	if len(m.CurrentValidatorSet) > 0 {
		for _, e := range m.CurrentValidatorSet {
			l = e.Size()
			n += 1 + l + sovCardano(uint64(l))
		}
	}
	if len(m.NextValidatorSet) > 0 {
		for _, e := range m.NextValidatorSet {
			l = e.Size()
			n += 1 + l + sovCardano(uint64(l))
		}
	}
	if m.TrustingPeriod != 0 {
		n += 1 + sovCardano(uint64(m.TrustingPeriod))
	}
	if len(m.UpgradePath) > 0 {
		for _, s := range m.UpgradePath {
			l = len(s)
			n += 1 + l + sovCardano(uint64(l))
		}
	}
	if m.TokenConfigs != nil {
		l = m.TokenConfigs.Size()
		n += 1 + l + sovCardano(uint64(l))
	}
	return n
}

func (m *Misbehaviour) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovCardano(uint64(l))
	}
	if m.BlockData1 != nil {
		l = m.BlockData1.Size()
		n += 1 + l + sovCardano(uint64(l))
	}
	if m.BlockData2 != nil {
		l = m.BlockData2.Size()
		n += 1 + l + sovCardano(uint64(l))
	}
	return n
}

func sovCardano(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCardano(x uint64) (n int) {
	return sovCardano(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Height) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCardano
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Height: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Height: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionNumber", wireType)
			}
			m.RevisionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevisionNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionHeight", wireType)
			}
			m.RevisionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevisionHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCardano(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCardano
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCardano
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCardano(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCardano
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCardano
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfKeyHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfKeyHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCardano(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCardano
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCardano
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Height == nil {
				m.Height = &Height{}
			}
			if err := m.Height.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNo", wireType)
			}
			m.EpochNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderCbor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderCbor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyCbor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyCbor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochNonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCardano(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCardano
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCardano
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenConfigs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenConfigs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerTokenUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandlerTokenUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionPolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionPolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelPolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelPolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCardano(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCardano
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCardano
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestHeight == nil {
				m.LatestHeight = &Height{}
			}
			if err := m.LatestHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrozenHeight == nil {
				m.FrozenHeight = &Height{}
			}
			if err := m.FrozenHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidAfter", wireType)
			}
			m.ValidAfter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidAfter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			m.GenesisTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenesisTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotPerKesPeriod", wireType)
			}
			m.SlotPerKesPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotPerKesPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValidatorSet = append(m.CurrentValidatorSet, &Validator{})
			if err := m.CurrentValidatorSet[len(m.CurrentValidatorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextValidatorSet = append(m.NextValidatorSet, &Validator{})
			if err := m.NextValidatorSet[len(m.NextValidatorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustingPeriod", wireType)
			}
			m.TrustingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradePath = append(m.UpgradePath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenConfigs == nil {
				m.TokenConfigs = &TokenConfigs{}
			}
			if err := m.TokenConfigs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCardano(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCardano
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Misbehaviour) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCardano
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Misbehaviour: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Misbehaviour: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockData1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockData1 == nil {
				m.BlockData1 = &BlockData{}
			}
			if err := m.BlockData1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockData2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCardano
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCardano
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockData2 == nil {
				m.BlockData2 = &BlockData{}
			}
			if err := m.BlockData2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCardano(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCardano
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCardano(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCardano
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCardano
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCardano
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCardano
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCardano
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCardano        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCardano          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCardano = fmt.Errorf("proto: unexpected end of group")
)
